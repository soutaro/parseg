module Parseg
  class Config
    module Expression
      type t = TokenExpression | NonTerminalExpression | RepeatingNonTerminalExpression | AlternationExpression

      # ```yaml
      # - token: tLPAREN
      # ```
      #
      class TokenExpression
        attr_reader token: Symbol

        def initialize: (Symbol) -> void
      end

      # ```yaml
      # - non_terminal: Expression
      # ```
      class NonTerminalExpression
        attr_reader name: Symbol

        def initialize: (Symbol) -> void
      end

      class RepeatingNonTerminalExpression
        attr_reader non_terminal: Symbol

        attr_reader separator_token: Symbol?

        attr_reader allow_empty: bool

        type trailing = :required | :optional | :prohibited

        attr_reader trailing_token: trailing

        def initialize: (non_terminal: Symbol, separator_token: Symbol?, allow_empty: bool, trailing_token: trailing) -> void
      end

      class AlternationExpression
        attr_reader exprs: Array[t]

        attr_reader allow_empty: bool

        def initialize: (exprs: Array[t], allow_empty: bool) -> void
      end
    end
  end
end
