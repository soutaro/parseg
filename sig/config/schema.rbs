module Parseg
  class Config
    type token_expression_type = { token: String }

    type non_terminal_expression_type = { non_terminal: String }

    type trailing_type = "required" | "optional" | "prohibited"

    type repeating_non_terminal_expression_type = {
      non_terminal: String,
      separator_token: String,
      allow_empty: bool?,
      trailing: trailing_type?
    }

    type alternation_expression_type = {
      exprs: Array[expression_type],
      allow_empty: bool?
    }

    type expression_type = token_expression_type
                         | non_terminal_expression_type
                         | repeating_non_terminal_expression_type
                         | alternation_expression_type

    type production_rule_seqs_type = Array[expression_type]

    type config_type = {
      look_ahead_size: Integer,
      rules: Hash[Symbol, Hash[Symbol, production_rule_seqs_type]]
    }

    interface _ConfigSchema
      def token_expression: () -> StrongJSON::_Schema[token_expression_type]

      def non_terminal_expression: () -> StrongJSON::_Schema[non_terminal_expression_type]

      def trailing: () -> StrongJSON::_Schema[trailing_type]

      def repeating_non_terminal_expression: () -> StrongJSON::_Schema[repeating_non_terminal_expression_type]

      def alternation_expression: () -> StrongJSON::_Schema[alternation_expression_type]

      def expression: () -> StrongJSON::_Schema[expression_type]

      def production_rule: () -> StrongJSON::_Schema[Hash[Symbol, production_rule_seqs_type]]

      def config: () -> StrongJSON::_Schema[config_type]
    end

    Schema: StrongJSON & _ConfigSchema
  end
end
