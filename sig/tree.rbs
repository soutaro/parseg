module Parseg
  module Tree
    type t = TokenTree
           | NonTerminalTree
           | EmptyTree
           | AlternationTree
           | RepeatTree
           | OptionalTree
           | MissingTree

    type tree = Array[t]

    class Base[EXPR]
      attr_reader expression: EXPR

      # Yields token ids
      %a{override}
      def each_token: () { (Integer) -> void } -> void
                    | () -> Enumerator[Integer, void]

      # Range of token id
      #
      # Returns `nil` if it doesn't have any token.
      #
      def token_range: () -> Range[Integer]?

      # The first *non-nil* token
      #
      # Returns `nil` if it's empty.
      #
      def first_token: () -> Integer?

      # The last *non-nil* token
      #
      # Returns `nil` if it's empty.
      #
      def last_token: () -> Integer?

      # The range of positions that covers the tree
      #
      # Returns `nil` if it's empty.
      #
      def range: (TokenFactory) -> Range[Integer]?

      # The range of the `first_token`
      def first_token_range: (TokenFactory) -> Range[Integer]?

      # The range of the `last_token`
      def last_token_range: (TokenFactory) -> Range[Integer]?

      # # Indicates if there is an error inside this tree
      # #
      # # * Returns `nil` if everything under the tree is ok (no error)
      # # * Returns an `MissingTree` if error is at the same level
      # # * Returns no `MissingTree` object if one of the sub tree has error
      # #
      # def error_tree?: () -> Array[t]?

      # def immediate_error_tree?: () -> Array[MissingTree]?

      # def error_trees: (Array[t]) -> Array[t]
    end

    class TokenTree < Base[Grammar::Expression::TokenSymbol]
      attr_reader token_id: Integer

      def initialize: (Grammar::Expression::TokenSymbol, Integer) -> void
    end

    class NonTerminalTree < Base[Grammar::Expression::NonTerminalSymbol]
      # The tree which is reduced to the non-ternimal
      #
      # Cannot be empty.
      #
      attr_reader tree: tree

      def initialize: (Grammar::Expression::NonTerminalSymbol, tree) -> void
    end

    class EmptyTree < Base[Grammar::Expression::Empty | Grammar::Expression::Optional | Grammar::Expression::NonTerminalSymbol]
      def initialize: (Grammar::Expression::Empty | Grammar::Expression::Optional | Grammar::Expression::NonTerminalSymbol) -> void
    end

    class AlternationTree < Base[Grammar::Expression::Alternation]
      # Cannot be empty
      attr_reader tree: tree

      def initialize: (Grammar::Expression::Alternation, tree) -> void
    end

    class RepeatTree < Base[Grammar::Expression::Repeat]
      # Cannot be empty
      attr_reader trees: Array[tree]

      def each_content: () { (tree) -> void } -> void
                      | () -> Enumerator[tree, void]

      def each_separator: () { (tree) -> void } -> void
                        | () -> Enumerator[tree, void]

      def initialize: (Grammar::Expression::Repeat, Array[tree]) -> void
    end

    class OptionalTree < Base[Grammar::Expression::Optional]
      # Cannot be empty
      attr_reader tree: tree

      def initialize: (Grammar::Expression::Optional, tree) -> void
    end

    class MissingTree < Base[Grammar::Expression::t]
      # The token given to a rule, or `nil` if it is at eof
      attr_reader token: Integer?

      def initialize: (Grammar::Expression::t, Integer?) -> void
    end
  end
end
