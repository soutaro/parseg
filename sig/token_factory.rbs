module Parseg
  # TokenFactory generates a sequence of tokens, with unique `id`
  #
  # There are two modes:
  #
  # 1. Standalone mode starts from the fresh input (with empty `#changes`)
  # 2. Incremental mode that knows where the input is changed
  #
  # TokenFactory can be created with two sets of parameters:
  #
  # * Input string, no last status, and no changes
  # * Last status, that didn't generate a successful sequence of tokens, and changes since the last status
  #
  class TokenFactory
    class FactoryStatus
      attr_reader last_tokens: Array[[Integer, token]]

      attr_reader last_input: String

      attr_reader incoming_changes: Array[change]

      def initialize: (Array[[Integer, token]], String, Array[change]) -> void
    end

    # Pair of 1-origin line number and 0-origin character (current) number
    type position = [Integer, Integer]

    type change = [String, position, position]

    attr_reader tokenizer: _Tokenizer

    attr_reader status: FactoryStatus | String

    attr_reader tokens: Array[[Integer, token]]

    attr_reader current_token: token?

    attr_reader current_id: Integer?

    attr_reader enumerator: Enumerator[[Integer, token]?, void]

    @max_id: Integer

    # Returns a fresh token id
    def next_id: () -> Integer

    def initialize: (tokenizer: _Tokenizer, status: FactoryStatus) -> void

    # Returns a new TokenFactory with given changes
    #
    def update: (Array[change] changes) -> TokenFactory

    # Returns a new TokenFactory with pending changes applied
    #
    def reset: () -> TokenFactory

    # Returns a String with all pending changes, to previous status
    #
    def source: () -> String
    @source: String?

    # The range that contains everything in `#changes`
    #
    # * Returns `nil` with empty change
    #
    def surrounding_changed_range: () -> Range[Integer]?

    @surrounding_changed_range: Range[Integer] | Integer | nil

    def incoming_changes: () -> Array[change]

    def advance_token: () -> [Integer, token]?

    def advance_token!: () -> [Integer, token]

    def current_token!: () -> token

    def current_id!: () -> Integer

    %a{pure} def current_type: () -> Symbol?

    def current_type!: () -> Symbol

    %a{pure} def current_range: () -> Range[Integer]?

    def current_range!: () -> Range[Integer]

    def token_range: (Integer id) -> Range[Integer]

    def token: (Integer id) -> token

    def token_string: (Integer id) -> String?

    def token_string!: (Integer id) -> String

    def token_type: (Integer id) -> Symbol?

    def token_type!: (Integer id) -> Symbol

    # Returns `true` if a token of the `id` is reused one
    #
    # `id` is `current_id` if omitted.
    #
    def token_changed?: (?Integer id) -> bool

    # Tokens that are newly inserted into current tokens
    def inserted_tokens: () -> Hash[Integer, token]

    # Tokens that are deleted from previous tokens
    def deleted_tokens: () -> Hash[Integer, token]

    # Add new `change` to `self` with given range
    def with_additional_change: (Range[Integer]) -> TokenFactory
  end
end
