module Parseg
  #
  # # Tokens
  #
  # Parser has one token that is returned from `#current_token`.
  #
  #
  class Parser
    attr_reader grammar: Grammar

    attr_reader factory: TokenFactory

    # `true` to enable *skip unknown tokens* feature
    attr_accessor skip_unknown_tokens_enabled: bool

    # `true` to enable *error tolerant* mode
    attr_accessor error_tolerant_enabled: bool

    def initialize: (grammar: Grammar, factory: TokenFactory) -> void

    def parse: (Grammar::NonTerminal) -> Result

    @parsing_changes_stack: Array[[Symbol, bool]]

    @leaving_change: bool

    # Returns true if current_token is changed
    def parsing_change?: () -> bool

    def push_stack: [A] (Symbol, bool cut) { () -> A } -> A

    def current_non_terminal_name: () -> Symbol?

    # Enterred to change during parsing current *cutting* non terminal symbol
    def entered_to_changed?: () -> bool

    # Set `entered_to_changed?` to true
    def consuming_changed_token: () -> void

    private

    @exit_symbol: Symbol?

    def parse_rule: (Grammar::Expression::t, Set[Symbol] consumable_tokens, Array[Integer] skip_tokens) -> Tree::t

    def skip_non_consumable_tokens: (Set[Symbol] consumable, Array[Integer] skip_tokens) -> void

    def new_consumable_tokens: (Set[Symbol] tokens, *Grammar::Expression::t? next_exprs) -> Set[Symbol]

    def throw_error_tree: (Tree::MissingTree) -> bot

    # Returns current token type
    #
    # * Returns Symbol for current token
    # * Returns `true` for incremental parsing abort
    # * Returns `nil` at EOF
    #
    def current_token_type: () -> (Symbol | true | nil)

    def current_token_id: () -> Integer?

    def current_token_id!: () -> Integer

    def current_token_included_in?: (Set[Symbol?]) -> bool

    def current_token_equals?: (Symbol?) -> bool

    def advance_token: () -> void
  end
end
