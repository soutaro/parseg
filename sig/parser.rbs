module Parseg
  #
  # # Tokens
  #
  # Parser has one token that is returned from `#current_token`.
  #
  #
  class Parser
    attr_reader grammar: Grammar

    attr_reader factory: TokenFactory

    # `true` to enable *skip unknown tokens* feature
    attr_accessor skip_unknown_tokens_enabled: bool

    # `true` to enable *error tolerant* mode
    attr_accessor error_tolerant_enabled: bool

    def initialize: (grammar: Grammar, factory: TokenFactory) -> void

    def parse: (Grammar::NonTerminal) -> Result

    private

    @exit_symbol: Symbol?

    def parse_rule: (Grammar::Expression::t, Set[Symbol] consumable_tokens, Array[Integer] skip_tokens) -> Tree::t

    def skip_non_consumable_tokens: (Set[Symbol] consumable, Array[Integer] skip_tokens) -> void

    def new_consumable_tokens: (Set[Symbol] tokens, *Grammar::Expression::t? next_exprs) -> Set[Symbol]

    def throw_error_tree: (Tree::MissingTree) -> bot
  end
end
