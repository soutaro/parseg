module Parseg
  class Parser
    attr_reader grammar: Grammar

    attr_reader tokenizer: _Tokenizer

    attr_reader token_locator: TokenLocator

    @token_id: Integer

    @next_token: token?

    def initialize: (grammar: Grammar, tokenizer: _Tokenizer) -> void

    def advance_token: () -> token?

    def advance_token!: () -> token

    %a{pure} def next_id: () -> Integer?

    def next_id!: () -> Integer

    %a{pure} def next_token: () -> token?

    def next_token!: () -> token

    %a{pure} def next_type: () -> Symbol?

    def parse: (Grammar::NonTerminal) -> Result

    def parse_rule: (Grammar::Expression::t, Set[Symbol?] next_tokens, Array[Integer] skip_tokens) -> Tree::t

    def skip_unknown_tokens: (Set[Symbol?] next_tokens, Grammar::Expression::t? next_expr, Array[Integer] skip_tokens) -> token?

    def with_next_tokens: [T] (Set[Symbol?], Grammar::Expression::t?) { (Set[Symbol?]) -> T } -> T
  end
end
