use Parseg::Grammar::Expression

module Parseg
  #
  # # Tokens
  #
  # Parser has one token that is returned from `#current_token`.
  #
  #
  class Parser
    attr_reader grammar: Grammar

    attr_reader factory: TokenFactory

    # `true` to enable *skip unknown tokens* feature
    attr_accessor skip_unknown_tokens_enabled: bool

    # `true` to enable *error tolerant* mode
    attr_accessor error_tolerant_enabled: bool

    def initialize: (grammar: Grammar, factory: TokenFactory) -> void

    def parse: (Grammar::NonTerminal) -> Result

    # Parsing-changes status
    #
    # * The name of the *block* non-terminal symbol
    # * If the *current* token is changed at the beginning of the symbol
    #
    @parsing_changes_stack: Array[[Symbol, bool]]

    # Returns true if current_token is changed
    def parsing_change?: () -> bool

    def push_stack: [A] (Symbol, bool block) { () -> A } -> A

    def current_non_terminal_name: () -> Symbol?

    def inside_block_in_change?: () -> bool

    @eoc: bool
    def end_of_change?: () -> bool

    @boc: bool
    def begin_of_change?: () -> bool

    def consume_end_of_change: () -> void

    def outer_most_block_in_change?: () -> bool

    private

    @exit_symbol: Symbol?

    # Parses the sequence of expressions, connected with `#next_expr` method
    #
    # Returns an array
    #
    def parse_rule: (Expression::t?, Set[Symbol] consumable_tokens, Array[Integer] skip_tokens) -> Tree::tree

    # Parses single expression and returns one of the instance of tree
    #
    def parse_single_rule: (Expression::t, Set[Symbol] consumable_tokens, Array[Integer] skip_tokens) -> Tree::t

    def skip_non_consumable_tokens: (Set[Symbol] consumable, Array[Integer] skip_tokens) -> void

    def new_consumable_tokens: (Set[Symbol] tokens, *Expression::t? next_exprs) -> Set[Symbol]

    # Returns or `throw` the given error tree
    def return_error_tree: (Tree::MissingTree) -> Tree::MissingTree

    def catch_error_tree: () { () -> Tree::tree } -> Tree::tree

    def throw_error_tree: (Tree::MissingTree) -> bot

    # Returns current token type
    #
    # * Returns Symbol for current token
    # * Returns `true` for incremental parsing abort
    # * Returns `nil` at EOF
    #
    def current_token_type: () -> (Symbol | true | nil)

    def current_token_id: () -> Integer?

    def current_token_id!: () -> Integer

    def current_token_included_in?: (Set[Symbol?]) -> bool

    def current_token_equals?: (Symbol?) -> bool

    def advance_token: () -> void
  end
end
