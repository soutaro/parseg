#!/usr/bin/env ruby

require "language_server-protocol"
require "parseg"
require "uri"
require "pp"
require "rbs"
require "strscan"
require "optparse"

def empty_binding
  binding
end

error_tolerant_enabled = true
skip_tokens_enabled = true
change_based_recovery_enabled = true

OptionParser.new do |opts|
  opts.on("--no-error-tolerant") do
    error_tolerant_enabled = false
  end
  opts.on("--no-skip-tokens") do
    skip_tokens_enabled = false
  end
  opts.on("--no-change-based-recovery") do
    change_based_recovery_enabled = false
  end
end.parse!(ARGV)

# @type const LSP: untyped

LSP = LanguageServer::Protocol

file = ARGV[0]
rule = ARGV[1].to_sym

STDERR.puts "Loading grammar from #{file}..."

# @type var tokenizer: Parseg::_Tokenizer
# @type var grammar: Parseg::Grammar
tokenizer, grammar = eval(File.read(file), __skip__ = empty_binding, file)

writer = LSP::Transport::Stdio::Writer.new
reader = LSP::Transport::Stdio::Reader.new

trees = {} #: Hash[String, Parseg::ParsingSession]

STDERR.puts "Starting loop..."

reader.read do |request|
  STDERR.puts "⏩ method = #{request[:method]}, id=#{request[:id]}, params=#{request[:params].inspect}"

  method = request[:method].to_sym

  case method
  when :initialize
    response = {
      capabilities: {
        textDocumentSync: {
          openClose: true,
          save: true,
          change: LSP::Constant::TextDocumentSyncKind::INCREMENTAL
        },
        documentSymbolProvider: {
          label: "Parseg demo"
        }
      }
    }
  when :"textDocument/didChange"
    # @type var uri: String
    # @type var changes: Array[Parseg::TokenFactory::change]
    uri = request[:params][:textDocument][:uri]
    changes = request[:params][:contentChanges].map do |change|
      start_line = change[:range][:start][:line] + 1
      start_column = change[:range][:start][:character]

      end_line = change[:range][:end][:line] + 1
      end_column = change[:range][:end][:character]

      [
        change[:text],
        [start_line, start_column],
        [end_line, end_column]
      ]
    end

    session = trees[uri]
    session.update(changes)

    session.last_source.each_line() do |line|
      Parseg.logger.info "> #{line.chomp}"
    end

  when :"textDocument/didOpen"
    uri = request[:params][:textDocument][:uri]
    text = request[:params][:textDocument][:text]

    session = Parseg::ParsingSession.new(tokenizer: tokenizer, grammar: grammar, start: rule)
    session.error_tolerant_enabled = error_tolerant_enabled
    session.skip_unknown_tokens_enabled = skip_tokens_enabled
    session.change_based_error_recovery_enabled = change_based_recovery_enabled

    session.update([[text, [1, 0], [1, 0]]])

    trees[uri] = session

  when :"textDocument/didClose"
    uri = request[:params][:textDocument][:uri]
    trees.delete(uri)

  when :"textDocument/documentSymbol"
    uri = request[:params][:textDocument][:uri]
    session = trees[uri]
    buffer = RBS::Buffer.new(name: uri, content: session.last_source)

    formatter = Parseg::LspTreeFormatter.new(session.last_result.factory, buffer)
    response = formatter.format_tree(session.last_result.tree, last_position: { line: 0, character: 0 })

    diagnostics = [] #: Array[LanguageServer::Protocol::Interface::Diagnostic]

    session.last_result.skip_tokens.each do |token_id|
      type, offset, value = session.last_result.factory.token(token_id)

      range = session.last_result.factory.token_range(token_id)
      start_line, start_column = buffer.pos_to_loc(range.begin)
      end_line, end_column = buffer.pos_to_loc(range.end)

      diagnostics << LanguageServer::Protocol::Interface::Diagnostic.new(
        range: {
          start: { line: start_line - 1, character: start_column },
          end: { line: end_line - 1, character: end_column }
        },
        severity: LanguageServer::Protocol::Constant::DiagnosticSeverity::WARNING,
        message: "Token skipped: type=#{type} (`#{value}`)"
      )
    end

    session.last_result.each_error_tree() do |error|
      if error.token
        type, _, value = session.last_result.factory.token(error.token)

        range = session.last_result.factory.token_range(error.token)
        start_line, start_column = buffer.pos_to_loc(range.begin)
        end_line, end_column = buffer.pos_to_loc(range.end)

        expr =
          case error.expression
          when Parseg::Grammar::Expression::TokenSymbol
            "T(:#{error.expression.token})"
          when Parseg::Grammar::Expression::NonTerminalSymbol
            "NT(:#{error.expression.non_terminal.name})"
          else
            "(#{error.expression.class.name})"
          end

        diagnostic = LanguageServer::Protocol::Interface::Diagnostic.new(
          range: {
            start: { line: start_line - 1, character: start_column },
            end: { line: end_line - 1, character: end_column }
          },
          severity: LanguageServer::Protocol::Constant::DiagnosticSeverity::ERROR,
          message: "Unexpected token: type=#{type}, value=#{value}, expected tokens by #{expr}: #{error.expression.first_tokens}"
        )

        diagnostics << diagnostic
      end
    end

    if range = session.last_result.factory.surrounding_changed_range
      start_line, start_column = buffer.pos_to_loc(range.begin)
      end_line, end_column = buffer.pos_to_loc(range.end)

      diagnostic = LanguageServer::Protocol::Interface::Diagnostic.new(
        range: {
          start: { line: start_line - 1, character: start_column },
          end: { line: end_line - 1, character: end_column }
        },
        severity: LanguageServer::Protocol::Constant::DiagnosticSeverity::INFORMATION,
        message: "Changed after last parsing success"
      )

      diagnostics << diagnostic
    end

    STDERR.puts "Sending publishDiagnostics notification with #{diagnostics.size} diagnostics"

    writer.write(
      method: "textDocument/publishDiagnostics",
      params: {
        uri: uri,
        diagnostics: diagnostics
      }
    )
  end

  if request[:id]
    STDERR.puts "Sending response to #{request[:id]}..."
    writer.write(id: request[:id], result: response)
  end
end
